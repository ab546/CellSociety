package cellsociety_team03;

import javafx.animation.KeyFrame;
	import javafx.animation.Timeline;
	import javafx.application.Application;
	import javafx.scene.Group;
	import javafx.scene.Scene;
	import javafx.scene.shape.Circle;
	import javafx.scene.text.Text;
	import javafx.scene.image.Image;
	import javafx.scene.image.ImageView;
	import javafx.scene.input.KeyCode;
	import javafx.scene.paint.Color;
	import javafx.scene.paint.Paint;
	import javafx.scene.shape.Rectangle;
	import javafx.scene.shape.Shape;
	import javafx.stage.Stage;
	import javafx.util.Duration;
	import javafx.event.ActionEvent;
	import javafx.event.EventHandler;
import java.util.Random;
import cellsociety_team03.ConwayDefault;
import cellsociety_team03.Default;
import cellsociety_team03.DefaultFactory;
import cellsociety_team03.FireDefault;
import cellsociety_team03.SegregationDefault;
import cellsociety_team03.WatorDefault;
import java.math.*;
	import javafx.scene.control.Label;
	import javafx.scene.control.Slider;
	import javafx.event.ActionEvent;
	import javafx.event.EventHandler;
	import java.util.List;
import java.util.Map;
import java.util.ArrayList;
	import javafx.scene.control.Button;
import java.util.Arrays;
import java.util.HashMap;
public class Interface extends Application{
	
	/**
	 * A basic example JavaFX program for the first lab.
	 * 
	 * @author Robert C. Duvall
	 */
		
		
	    public static final String TITLE = "Example JavaFX";
	    public static final int GRID_SPACE=300;
	    public static final int SIZE =800;
	    public static final Paint BACKGROUND = Color.WHITE;
	    public static final int FRAMES_PER_SECOND = 60;
	    public static final int MILLISECOND_DELAY = 1000 / FRAMES_PER_SECOND;
	    public static final double SECOND_DELAY = 1.0 / FRAMES_PER_SECOND;
	    public static final int KEY_INPUT_SPEED = 20;
	    public static final Map<String,Default> GAMECHOICE=getGames();
		private static Map<String, Default> getGames()
		{
			 Map<String,Default> myMap = new HashMap<String,Default>();
			myMap.put("Wator", new WatorDefault());
			myMap.put("Fire", new FireDefault());
			myMap.put("Conway", new ConwayDefault());
			myMap.put("Segregation", new SegregationDefault());
			return myMap;
		};
	    // some things we need to remember during our game
	    private Scene myScene;
	    private Default myDefault;
	   
	   private Rectangle[][] rectangles;
	    private Stage myStage;
	   private Group root;
	  private List<Slider>sliders;
	   
	    private Cell[][] myGrid;
	   
	
       private int[] myValues;
	   
       
	   int gridSize=10;
	   
	   
       /**
	     * Initialize what will be displayed and how it will be updated.
	     */
	    //@Override
	    public void start (Stage s) {
	        // attach scene to the stage and display it
	       myStage=s;
	    	myScene = promptWhichGame(SIZE, SIZE, BACKGROUND);
	        
	    	s.setScene(myScene);
	        s.setTitle(TITLE);
	        s.show();
	        // attach "game loop" to timeline to play it
	        
	        //myStage.setScene(setupGame(SIZE,SIZE,BACKGROUND));
	        	
	    
	    }
	
	   private Scene promptWhichGame(int width, int height, Paint background){
		    root=new Group();
		    myScene=new Scene(root,width,height,background);
		  makeText(root);
		    makeGameButtons(root);
		   
		   return myScene;
	   }
	   private void makeText(Group root){
		   Text t=new Text("Which game would you like to play?");
		   t.setX(SIZE/2-t.getBoundsInParent().getWidth()/2);
		   t.setY(SIZE/8);
		   root.getChildren().add(t);
	   }
	   private void makeGameButtons(Group root){
		   int i=0;
		   for(String s:GAMECHOICE.keySet()){
			   Button button=new Button(s);
			   root.getChildren().add(button);
			   button.setLayoutX(SIZE/2-button.getBoundsInLocal().getWidth()/2);
			   button.setLayoutY(SIZE/4+50*i);
			   button.setOnAction(new EventHandler<ActionEvent>() {
				 
				   public void handle(ActionEvent event) {
					   myDefault= new DefaultFactory(s).getDefault();
				    	 myStage.setScene(setupGame(SIZE,SIZE,BACKGROUND));
					   KeyFrame frame = new KeyFrame(Duration.millis(MILLISECOND_DELAY),
                               e -> step(SECOND_DELAY));
 Timeline animation = new Timeline();
 animation.setCycleCount(Timeline.INDEFINITE);
 animation.getKeyFrames().add(frame);
 animation.play();
				    }
				});
		   i++;
		   }
	   }
	    private Scene setupGame (int width, int height, Paint background) {
	        // create one top level collection to organize the things in the scene
	         
	    	root = new Group();
	        // create a place to see the shapes
	        myScene = new Scene(root, width, height, background);
	        // make some shapes and set their properties
	        sliders=new ArrayList<Slider>();
	       
	        //for(int i=0;i<new cellsociety_team03.XML("data/test.xml").getAttributes().size();i++){
	      int c=0;
	        for(String s:myDefault.getFields()){
	        	Slider slider=getSlider(350,350+50*c,s,c);
	        sliders.add(slider);
	        
	        root.getChildren().add(slider);
	        c++;
	        }
	        if(myValues!=null){
	        gridSize=myValues[myDefault.getFields().size()-2];
	        }
	        myValues= new int[myDefault.getFields().size()];
	      
	        for(int i=0;i<myDefault.getFields().size();i++){
	        myValues[i]=(int)sliders.get(i).getValue();
	        
	      }
	       
	        myGrid=getGrid();
	       rectangles= new Rectangle[gridSize][gridSize];
	       updaterectangles();
	       
	       addStartButton();
	       myScene.setOnMouseClicked(e -> handleMouseInput(e.getX(),e.getY()));
	       return myScene;
	        
	    }
	    
	    
	    private  void updaterectangles(){
	    	
	    	for(int i=0;i<gridSize;i++){
		    	   for(int j=0;j<gridSize;j++){
		    		 // System.out.println(i + "," + j);
		    		   Rectangle newrectangle=getRectangle(i,j,myGrid[i][j]);
		    		root.getChildren().add(newrectangle);
		    		
		    		rectangles[i][j]= (newrectangle);
		    	   }
		       }
	    }
	    // Change properties of shapes to animate them 
	    // Note, there are more sophisticated ways to animate shapes, but these simple ways work fine to start.
	    
	    
	    // What to do each time a key is pressed
	    
	    private void handleMouseInput(double X, double Y){
	    	//for(Cell cell:rectangles){
	    	//	if (cell.getRectangle().contains(X, Y)){
	    	//		cell.updateState();
	    	//	}
	    	//}
	    }
	    public void step(double elapsedTime){
	    	
	    	//System.out.println(myGrid[0][0].getType());
	    	Random rand=new Random(1);
	    	int counter=0;
	    	for(int i=0;i<myDefault.getFields().size();i++){
	    		if(myValues[i]!=(int) sliders.get(i).getValue()&&!sliders.get(i).isValueChanging()){
		    		myValues[i]=(int) sliders.get(i).getValue();
		    		counter++;
	    		
	    		}
	    	}
	    	if(counter>0){
    			
    			Scene newScene=setupGame(SIZE,SIZE,BACKGROUND);
    	    	myStage.setScene(newScene);
    		}	
	    	//updaterectangles();
	    }
	    
	   private void addStartButton(){
		   Button startButton=new Button("Start");
		   root.getChildren().add(startButton);
		   startButton.setLayoutX(0);
		   startButton.setLayoutY(0);
		   startButton.setOnAction(new EventHandler<ActionEvent>() {
			 
			   public void handle(ActionEvent event) {
				 //myStage.close();
				   System.out.println(myValues[myValues.length-1]);
				 CellInterface r = new CellInterface(getGame(), myValues[myValues.length-1]);
				 
				 r.start(myStage);
						 //.start(myStage);
			   }
			   });
		   
	   }
	    
	    
	
	    public Rectangle getRectangle(int horizontalNumber, int verticalNumber,Cell cell){
	    	Rectangle myRectangle=new Rectangle();
	    	int rectSize=GRID_SPACE/gridSize;
	    	int offset=(SIZE-GRID_SPACE-2*gridSize)/2;
	    	myRectangle.setWidth(rectSize);
	    	myRectangle.setHeight(rectSize);
	    	myRectangle.setX(horizontalNumber*(myRectangle.getWidth()+2)+offset);
	    	myRectangle.setY(verticalNumber*myRectangle.getHeight()+verticalNumber*2);
	    	
	    	myRectangle.setFill(Paint.valueOf(cell.getTypecolor()));
	    	myRectangle.setStroke(Color.BLACK);
	    	
	    	myRectangle.setOnMouseClicked(e -> {myGrid[horizontalNumber][verticalNumber].updateState() ; myRectangle.setFill(Paint.valueOf(cell.getTypecolor()));} );
	    	return myRectangle;
	    	
	    }
	    public Slider getSlider(double X, double Y,String s,int i){
	    	Slider slider = new Slider();
	        slider.setMin(0);
	      
	        //System.out.println(s);
	        System.out.println(myDefault.getAttributes().get(s));
	        slider.setValue(Integer.parseInt(myDefault.getAttributes().get(s)));
	        if(myValues!=null){	 
	        slider.setValue(myValues[i]);
	        }
	        //System.out.println(myDefault.getAttributes());
	        //System.out.println(Arrays.toString(myValues));
	        slider.setMax(myDefault.getMaxes().get(s));
	        
	        slider.setShowTickLabels(true);
	        slider.setShowTickMarks(true);
	        slider.setMajorTickUnit(slider.getMax()/5);
	        slider.setMinorTickCount(5);
	        slider.setBlockIncrement(10);
	        slider.setLayoutY(Y);
	        slider.setLayoutX(X);
	        
	        Label label2=new Label(s);
	        label2.setLayoutY(Y);
	        label2.setLayoutX(X-150);
	       
	        
	        root.getChildren().add(label2);
	        
	        return slider;
	    }
	  private Game getGame(){
		 Game startgame=myDefault.getnewgame(myValues);
		 startgame.getGrid().replacegrid(myGrid);
		  return startgame;
	  }
	  private Cell[][] getGrid(){
			 Cell[][] newgrid=myDefault.getGrid(myValues).getgrid();
			 myGrid=newgrid;
			  return newgrid;
		  }
	  private Grid getclassgrid(){
		  Grid newgrid=myDefault.getGrid(myValues);
		  return newgrid;
	  }
	  public Cell[][] giveGrid(){
		  return myGrid;
	  }
	public int[] giveInputs(){
		return myValues;
	}
	    /**
	     * Start the program.
	     */
	    public static void main (String[] args) {
	       launch(args);
	    }
	
}